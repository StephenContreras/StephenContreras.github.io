{"version":3,"sources":["components/Buttons.js","components/DynamicText.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","links","map","link","index","Button","variant","className","href","url","key","text","DynamicText","state","texts","TextInfo","currentIdx","BgColor","bind","TxtColor","this","bgcolor","txtcolor","Container","fluid","t","i","style","backgroundColor","color","onClick","setState","title","Row","noGutters","Col","md","lg","span","offset","par","idx","React","Component","App","AboutMe","Links","activeClass","to","spy","smooth","duration","id","Texts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b99fb031.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Button from 'react-bootstrap/Button'\r\nimport '../App.css';\r\n\r\nfunction Buttons(props) {\r\n  return (\r\n    \r\n    <div>\r\n        {props.links.map((link, index)=> (\r\n        <Button variant=\"light\" className=\"uniform\" href={link.url} key={index}>{link.text}</Button>\r\n        ))}\r\n    </div>\r\n          \r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../App.css';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\nclass DynamicText extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            texts: props.TextInfo,\r\n            currentIdx:0\r\n        };\r\n        this.BgColor = this.BgColor.bind(this);\r\n        this.TxtColor = this.TxtColor.bind(this);\r\n    }\r\n\r\n    BgColor(){\r\n        return this.state.texts[this.state.currentIdx].bgcolor\r\n    }\r\n\r\n    TxtColor(){\r\n        return this.state.texts[this.state.currentIdx].txtcolor\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <Container fluid=\"lg\"> \r\n            {this.state.texts.map((t, i)=> (\r\n            <Button variant=\"light\"\r\n                style={{backgroundColor:this.BgColor(), color:this.TxtColor()}}\r\n                onClick={() => this.setState({currentIdx:i})} \r\n                key={i}>\r\n                     {t.title}\r\n            </Button>\r\n            ))}\r\n            <Row className=\"row-with-gap\" noGutters>\r\n                <Col md={12} lg={{span: 10, offset: 1}}>\r\n                    <div className=\"large-title\" style={{backgroundColor:this.BgColor(), color:this.TxtColor()}}>\r\n                        <h2>{this.state.texts[this.state.currentIdx].title}</h2>\r\n                    </div> \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"row-with-gap\">\r\n                <Col md={12} lg={{span: 10, offset: 1}}>\r\n                <div className=\"text-box\" >\r\n                    {this.state.texts[this.state.currentIdx].text.map((par,idx) => <p key=\"idx\">{par}</p>)} \r\n                </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>    \r\n        )   \r\n    }\r\n}\r\n\r\nexport default DynamicText ","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Buttons from './components/Buttons'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './App.css';\r\nimport Links from './contents/links'\r\nimport AboutMe from './contents/aboutMe'\r\nimport Texts from './contents/texts'\r\nimport DynamicText from './components/DynamicText'\r\nimport { Link  } from 'react-scroll';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Container fluid=\"lg\">\r\n        <Row className=\"row-with-gap\" noGutters>\r\n          <Col md={12} lg={{span: 10, offset: 1}}>\r\n          <div className=\"large-title\">\r\n            <h1>Stephen Contreras</h1>\r\n          </div>\r\n          </Col>\r\n        </Row>\r\n          <Row className=\"row-with-gap\">\r\n            <Col md={12} lg={{span: 10, offset: 1}}>\r\n            <div className=\"text-box\">\r\n              {AboutMe.title !== \"\" && \r\n                  <h3>{AboutMe.title}</h3>\r\n              }\r\n              <p>{AboutMe.text}</p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        <Row>\r\n          <Col>\r\n            <Buttons links={Links}/>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Link\r\n              activeClass=\"active\"\r\n              to=\"moreInfo\"\r\n              spy={true}\r\n              smooth={true}\r\n              offset={0}\r\n              duration={500}>\r\n                <Button variant=\"light\" >More information</Button>\r\n              </Link>\r\n          </Col>\r\n        </Row>\r\n\r\n      </Container>\r\n\r\n      \r\n      <div id=\"moreInfo\">\r\n      <DynamicText TextInfo={Texts} ></DynamicText>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}